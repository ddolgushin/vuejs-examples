// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using RunTogether;
using RunTogether.Dal.Model;
using System;

namespace app_server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180603115443_Version2")]
    partial class Version2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:adminpack", "'adminpack', '', ''")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("RunTogether.Dal.Model.Marathon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<float?>("Distance");

                    b.Property<string>("Route");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Marathon");
                });

            modelBuilder.Entity("RunTogether.Dal.Model.MarathonLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MarathonId");

                    b.Property<int>("Role");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MarathonId");

                    b.HasIndex("UserId");

                    b.ToTable("MarathonLink");
                });

            modelBuilder.Entity("RunTogether.Dal.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("Picture");

                    b.Property<string>("PictureType");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RunTogether.Dal.Model.WaypointInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<int>("MarathonId");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.Property<string>("PictureType");

                    b.HasKey("Id");

                    b.HasIndex("MarathonId");

                    b.ToTable("WaypointInfo");
                });

            modelBuilder.Entity("RunTogether.Dal.Model.MarathonLink", b =>
                {
                    b.HasOne("RunTogether.Dal.Model.Marathon", "Marathon")
                        .WithMany("MarathonLinks")
                        .HasForeignKey("MarathonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RunTogether.Dal.Model.User", "User")
                        .WithMany("MarathonLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RunTogether.Dal.Model.WaypointInfo", b =>
                {
                    b.HasOne("RunTogether.Dal.Model.Marathon", "Marathon")
                        .WithMany("WaypointInfos")
                        .HasForeignKey("MarathonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
