using System;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using RunTogether.ApplicationServices.Mapping.Dto;

namespace RunTogether.Controllers
{
	public class TokenController : Controller
	{
		private IConfiguration _config;

		public TokenController(IConfiguration config)
		{
			_config = config;
		}

		// –§–æ—Ä–º–∏—Ä—É–µ—Ç JWT, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —Ç—Ä—ë—Ö —Å–µ–∫—Ü–∏–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö
		// —Ç–æ—á–∫–∞–º–∏ –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ Base64.
		//
		// –ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞:
		// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2IiwiZXhwIjoxNTI4NDU5MzY5LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjU2NzgvIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo1Njc4LyJ9.53jHdFR7E2IPMmwet4Bdp0c7URSk8BQRJxlHgZzBTuU
		//
		// –†–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–¥:
		// {"alg":"HS256","typ":"JWT"}{"userId":"6","exp":1528459369,"iss":"http://localhost:5678/","aud":"http://localhost:5678/"}Á∏átT{b2lÁÄùÁáªQ‰∞î'G·úÅNÂÄÄ
		//
		// –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–∫–µ–Ω–∞:
		//   * –ó–∞–≥–æ–ª–æ–≤–æ–∫ -- –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ, –µ–≥–æ —Ç–∏–ø–µ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
		//   * –¢–µ–ª–æ -- —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è (claims), –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Å—É–±—ä–µ–∫—Ç
		//     –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
		//   * –ü–æ–¥–ø–∏—Å—å -- –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è –≤ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å–µ–∫—Ü–∏–π.
		//
		// –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://auth0.com/blog/securing-asp-dot-net-core-2-applications-with-jwts/
		protected string BuildToken(UserModelDto user)
		{
			var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["Jwt:Key"]));
			var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
			var claims = new[] {
				new Claim("userId", user.Id.ToString())
			};
			var token = new JwtSecurityToken(
				_config["Jwt:Issuer"],
				_config["Jwt:Issuer"],
				claims,
				expires: DateTime.Now.AddMinutes(
					int.TryParse(_config["Jwt:TokenExpiration"], out var exp) ? exp : 30),
				signingCredentials: creds);

			return new JwtSecurityTokenHandler().WriteToken(token);
		}

		protected int GetUserId()
		{
			var userIdClaim = User.Claims.FirstOrDefault(o => o.Type == "userId")?.Value;
				
			if (!int.TryParse(userIdClaim, out var res))
				throw new Exception("–°–µ—Å—Å–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
			
			return res;
		}
	}
}
